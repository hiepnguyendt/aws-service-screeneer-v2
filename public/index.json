[
{
	"uri": "//localhost:1313/",
	"title": "AWS Service Screener",
	"tags": [],
	"description": "",
	"content": "Let start with AWS Service Screener AWS Service Screener v2 AWS Service Screener is an assessment tool designed to help organizations evaluate their AWS environments against AWS best practices and identify optimization opportunities. What is AWS Service Screener? AWS Service Screener is a tool that analyzes your AWS infrastructure and provides recommendations for:\nCost optimization - Identifying underutilized resources and cost-saving opportunities\nPerformance optimization - Recommending performance enhancements\nOperational excellence - Suggesting operational best practices\nReliability improvements - Identifying single points of failure and resilience gaps\nContent Introduce Prerequisites Basic Service Screener Operations Advanced Scanning Options Report Analysis and Interpretation Integration with AWS Well-Architected Tool Troubleshooting and Best Practices Workshop Conclusion "
},
{
	"uri": "//localhost:1313/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "This workshop will guide you through using AWS Service Screener v2, an open-source tool that analyzes your AWS environment and provides recommendations based on AWS Well-Architected Framework best practices. You\u0026rsquo;ll learn to install, configure, and run the tool to identify optimization opportunities across Security, Reliability, Operational Excellence, Performance Efficiency, and Cost Optimization.\nLearning Objectives By the end of this workshop, you will be able to:\nInstall and configure AWS Service Screener v2 Run comprehensive security and best practice assessments Interpret and analyze the generated reports Implement recommendations to improve your AWS environment Integrate findings with AWS Well-Architected Tool Prerequisites AWS Account with appropriate permissions Basic understanding of AWS services Familiarity with AWS CLI and CloudShell Key Features Automated Assessment Scans your AWS environment automatically Analyzes resource configurations and usage patterns Compares against AWS Well-Architected Framework principles Comprehensive Reporting Detailed findings with prioritized recommendations Cost impact analysis for each recommendation Implementation guidance and next steps Multi-Account Support Can assess multiple AWS accounts Provides consolidated reporting across your organization Supports AWS Organizations integration Assessment Areas The tool typically evaluates:\nCost Optimization\nUnused or underutilized EC2 instances Unattached EBS volumes Idle load balancers Reserved Instance opportunities Security\nIAM policy analysis Security group configurations Encryption settings Public access configurations Performance\nInstance sizing recommendations Storage optimization Network configuration improvements Reliability\nMulti-AZ deployments Backup configurations Auto Scaling settings How to Access AWS Service Screener is typically available through:\nAWS Support (for customers with Business or Enterprise support) AWS Professional Services engagements AWS Partner assessments Benefits Proactive optimization - Identify issues before they impact your workloads Cost savings - Discover immediate cost reduction opportunities Risk mitigation - Address security and compliance gaps Best practices alignment - Ensure your architecture follows AWS recommendations "
},
{
	"uri": "//localhost:1313/2-preparation/",
	"title": "Prerequisites",
	"tags": [],
	"description": "",
	"content": "2.1. Verify IAM Permissions Before starting, ensure your IAM user has the required permissions.\nRequired Permissions:\nReadOnlyAccess (AWS Managed Policy) AWSCloudShellFullAccess cloudformation:CreateStack cloudformation:DeleteStack Optional for Cross-Account Operations:\niam:SetSecurityTokenServicePreferences 2.2. Create IAM Policy (If Needed) If you need to create a custom policy, use this JSON:\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;cloudformation:CreateStack\u0026#34;, \u0026#34;cloudformation:DeleteStack\u0026#34;, \u0026#34;cloudshell:*\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } 2.3. Launch AWS CloudShell Log into your AWS Console Navigate to CloudShell service (search for \u0026ldquo;CloudShell\u0026rdquo; in the services menu) Launch CloudShell in your preferred region Wait for the environment to initialize AWS CloudShell 2.4. Install Service Screener v2 Run the following commands in CloudShell:\n# Navigate to temporary directory cd /tmp # Create and activate Python virtual environment python3 -m venv screener-env source screener-env/bin/activate # Upgrade pip python3 -m pip install --upgrade pip # Clean up any existing installation rm -rf service-screener-v2 # Clone the repository git clone https://github.com/aws-samples/service-screener-v2.git # Navigate to the project directory cd service-screener-v2 # Install dependencies pip install -r requirements.txt # Prepare Lambda runtime dependencies python3 unzip_botocore_lambda_runtime.py # Create alias for easy execution alias screener=\u0026#39;python3 $(pwd)/main.py\u0026#39; Install Service Screener V2 "
},
{
	"uri": "//localhost:1313/4-basicservicescreeneroperations/",
	"title": "Basic Service Screener Operations",
	"tags": [],
	"description": "",
	"content": "3.1. Your First Scan - Single Region, All Services Start with a basic scan of your current region: # Replace \u0026#39;us-east-1\u0026#39; with your current region screener --regions us-east-1 What happens during this scan:\nService Screener analyzes all supported AWS services in the specified region It runs read-only API calls to gather configuration information Checks are performed against AWS best practices Results are compiled into a comprehensive report 3.2. Monitor Scan Progress The scan will show progress indicators. Typical output includes:\nService discovery phase Individual service analysis Report generation Output file creation 3.3. Understanding Scan Duration Scan time depends on:\nNumber of resources in your account Number of regions scanned Number of services analyzed Network latency Typical scan times:\nSmall environment (few resources): 2-5 minutes Medium environment: 5-15 minutes Large environment: 15-30+ minutes "
},
{
	"uri": "//localhost:1313/5-advancedscanningoptions/",
	"title": "Advanced Scanning Options",
	"tags": [],
	"description": "",
	"content": "4.1. Multi-Region Scanning Scan multiple regions simultaneously: # Scan specific regions screener --regions us-east-1,us-west-2,eu-west-1 # Scan ALL regions (use with caution) screener --regions ALL 4.2. Service-Specific Scanning Focus on specific services for faster, targeted analysis:\n# Scan only S3 screener --regions us-east-1 --services s3 # Scan multiple specific services screener --regions us-east-1 --services s3,ec2,rds,iam # Scan with beta features enabled screener --regions us-east-1 --services s3,lambda --beta 1 4.3. Tag-Based Filtering Filter resources based on tags:\n# Filter by environment tag screener --regions us-east-1 --tags env=prod # Multiple tag filters screener --regions us-east-1 --tags env=prod%department=finance,hr # Complex tag filtering screener --regions us-east-1 --tags \u0026#34;Environment=Production%CostCenter=IT,Marketing\u0026#34; 4.4. Beta Features Enable beta features for additional checks:\nscreener --regions us-east-1 --beta 1 "
},
{
	"uri": "//localhost:1313/6-reportanalysisandinterpretation/",
	"title": "Report Analysis and Interpretation",
	"tags": [],
	"description": "",
	"content": "5.1. Download and Extract Report After the scan completes:\nDownload the report:\nIn CloudShell, click Actions â†’ Download file Enter the path: `/tmp/service-screener-v2/output.zip` Click \u0026ldquo;Download\u0026rdquo; Extract the report:\nUnzip the downloaded file on your local machine Open `index.html` in your web browser 5.2. Navigate the Report Interface The report includes:\nLeft Navigation Panel:\nDashboard overview Service-specific sections Summary statistics Main Content Area:\nDetailed findings Resource-specific recommendations Severity indicators Key Sections:\nCritical: Issues requiring immediate attention High: Important recommendations Medium: Optimization opportunities Low: Minor improvements 5.3. Understanding Finding Categories Security Findings: Unencrypted resources Overly permissive policies Missing security configurations Compliance violations Cost Optimization: Underutilized resources Oversized instances Unused resources Storage optimization opportunities Performance Suboptimal configurations Missing monitoring Inefficient resource allocation Reliability: Single points of failure Missing backups Inadequate disaster recovery Operational Excellence: Missing automation Inadequate monitoring Configuration drift 5.4. Prioritizing Recommendations Use this framework to prioritize findings:\nCritical Security Issues (Fix immediately) High-Impact Cost Savings (Quick wins) Reliability Improvements (Prevent outages) Performance Optimizations (User experience) Operational Improvements (Long-term efficiency) "
},
{
	"uri": "//localhost:1313/7-integrationwithawswell-architectedtool/",
	"title": "Integration with AWS Well-Architected Tool",
	"tags": [],
	"description": "",
	"content": "7.1. Enable Well-Architected Integration Create a workload in AWS Well-Architected Tool: screener --regions us-east-1 --beta 1 --others \u0026#39;{\u0026#34;WA\u0026#34;: {\u0026#34;region\u0026#34;: \u0026#34;us-east-1\u0026#34;, \u0026#34;reportName\u0026#34;: \u0026#34;MyWorkload_ServiceScreener\u0026#34;, \u0026#34;newMileStone\u0026#34;: 1}}\u0026#39; Parameters Explained:\nregion: Where to create the Well-Architected workload reportName: Name of your workload newMileStone: Set to 1 to create new milestone each run Set to 0 to create a milestone only if none exists 7.2. Migration Planning Evaluation For AWS Partners conducting migration evaluations:\nscreener --regions us-east-1 --others \u0026#39;{\u0026#34;mpe\u0026#34;: {\u0026#34;id\u0026#34;: \u0026#34;migration-eval-001\u0026#34;}}\u0026#39; 7.3. View Well-Architected Integration Navigate to AWS Well-Architected Tool in the AWS Console Find your workload (named as specified in `reportName`) Review the milestone created by Service Screener Combining Parameters You can combine both MPE and WA parameters: Output after combine screener --regions us-east-1 --others \u0026#39;{\u0026#34;WA\u0026#34;: {\u0026#34;region\u0026#34;: \u0026#34;us-east-1\u0026#34;, \u0026#34;reportName\u0026#34;: \u0026#34;SS_Report\u0026#34;, \u0026#34;newMileStone\u0026#34;: 1}, \u0026#34;mpe\u0026#34;: {\u0026#34;id\u0026#34;: \u0026#34;migration-eval-001\u0026#34;}}\u0026#39; "
},
{
	"uri": "//localhost:1313/8-troubleshooting-andbestpractices/",
	"title": "Troubleshooting and Best Practices",
	"tags": [],
	"description": "",
	"content": "8.1. Common Issues and Solutions Issue: Permission Denied Errors\n# Check your current AWS identity aws sts get-caller-identity # Verify permissions aws iam get-user aws iam list-attached-user-policies --user-name YOUR_USERNAME Issue: Scan Takes Too Long\nUse service-specific scanning: --services s3,ec2 Limit regions: --regions us-east-1 Use tag filtering to reduce scope Issue: Memory or Resource Errors\nReduce worker count: --workerCounts 2 Scan fewer services at once Use CloudShell in a region with fewer resources 8.2. Best Practices Scanning Strategy:\nStart with critical services (IAM, S3, EC2) Gradually expand to all services Run regular scans (weekly/monthly) Focus on high-impact findings first Report Management:\nStore reports securely (never expose publicly) Track remediation progress over time Share findings with relevant teams Document remediation actions taken Performance Optimization:\nUse tag filtering for large environments Scan during off-peak hours Consider breaking large scans into smaller chunks Monitor CloudShell resource usage "
},
{
	"uri": "//localhost:1313/9-conclusion/",
	"title": "Workshop Conclusion",
	"tags": [],
	"description": "",
	"content": "Key Takeaways Service Screener is a powerful tool for identifying AWS best practice violations Regular scanning helps maintain security and optimization posture Prioritization is crucial - focus on high-impact findings first Integration with existing processes maximizes value Continuous improvement through regular assessment and remediation Additional Resources AWS Service Screener GitHub Repository AWS Well-Architected Framework AWS Security Best Practices AWS Cost Optimization Command Reference Basic Commands # Simple scan screener --regions REGION_NAME # Multi-region scan screener --regions REGION1,REGION2,REGION3 # All regions screener --regions ALL # Specific services screener --regions REGION --services SERVICE1,SERVICE2 # With beta features screener --regions REGION --beta 1 # With tag filtering screener --regions REGION --tags KEY=VALUE # With Well-Architected integration screener --regions REGION --others \u0026#39;{\u0026#34;WA\u0026#34;: {\u0026#34;region\u0026#34;: \u0026#34;REGION\u0026#34;, \u0026#34;reportName\u0026#34;: \u0026#34;NAME\u0026#34;, \u0026#34;newMileStone\u0026#34;: 1}}\u0026#39; Service Identifiers s3 - Amazon S3 ec2 - Amazon EC2 rds - Amazon RDS iam - AWS IAM lambda - AWS Lambda cloudfront - Amazon CloudFront eks - Amazon EKS dynamodb - Amazon DynamoDB elasticache - Amazon ElastiCache opensearch - Amazon OpenSearch apigateway - Amazon API Gateway cloudtrail - AWS CloudTrail guardduty - Amazon GuardDuty kms - AWS KMS efs - Amazon EFS redshift - Amazon Redshift cloudwatch - Amazon CloudWatch Troubleshooting Guide Common Error Messages and Solutions Error: \u0026ldquo;Unable to locate credentials\u0026rdquo;\nSolution: Ensure AWS credentials are configured in CloudShell Run: aws configure list to verify Error: \u0026ldquo;Access Denied\u0026rdquo;\nSolution: Check IAM permissions Ensure ReadOnlyAccess policy is attached Error: \u0026ldquo;Region not found\u0026rdquo;\nSolution: Use correct region identifiers (e.g., us-east-1, not US East 1) Error: \u0026ldquo;Service not supported\u0026rdquo;\nSolution: Check supported services list Use correct service identifiers Performance Optimization Tips Reduce Scope:\nUse specific regions instead of ALL Target specific services Apply tag filters Resource Management:\nMonitor CloudShell resource usage Reduce worker count if needed Break large scans into smaller chunks Network Optimization:\nRun scans from regions close to your resources Avoid peak usage times Consider regional API limits "
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]